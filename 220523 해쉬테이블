1부터 n까지의 합을 구하는 공식 : n(n+1)/2


1. 해쉬테이블
	1) 원리
	 - 키값을 해쉬함수에 넣어서 value가 저장될 해쉬테이블의 주소값을 얻음
	 - 그 뒤 해쉬 테이블의 해당 주소에 value를 저장함
	 - 읽거나 지울때에도 해쉬 함수를 통해서 주소를 찾은뒤 바로 이동
	2) 장점
	 - 데이터 저장/읽기 속도가 매우 빠름
	 - 키에 대한 데이터가 존재하는지, 중복이 존재하는지 등의 검사가 쉬움
	3) 단점
	 - 저장공간이 좀더 많이 필요함. 미리 저장공간을 다 정해놔야함
	 - 여러 키에 해당하는 주소가 동일한 경우 충돌이 발생 할 수 있음. 추가 조치 필요
	 4) 용도
	 - 검색이 많이 필요한 경우
	 - 저장, 삭제, 읽기가 빈번한 경우
	 - 캐쉬 구현시(중복 확인이 쉽기 때문)

2. 충돌 문제 해결
	1) 개방형 해싱 Chaining
	  - 해쉬 값이 중복되는 경우, 해당 주소에 링크드 리스트를 생성함
	  - 파이썬에서는 링크드 리스트를 안쓰고, 이중 리스트로 해결 가능함.

3. 시간복잡도
	-  일반적인 경우 O(1)
	-  최악의 경우 O(n)
	- 배열에 데이터를 저장하고 검색 : O(n)
	- 이상적인 해쉬테이블에서 데이터 검색시 O(1)
	- 해쉬테이블은 보통 일반적인 경우를 기대하고 작성한다. 


