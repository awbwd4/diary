트리
	1. 이진트리
		1) 노드의 최대 브랜치가 2인 트리
		2) 이진탐색트리(BST)
			- 왼쪽 노드는 해당 노드보다 작은 값, 오른쪽 노드는 큰 값을 갖는 이진 트리
			- 시간 복잡도 : 일반적으로 log(n), 최악의 경우 n ->한쪽방향으로만 이뤄져있는 트리인 경우
	
	2. 힙(heap)
		1) 완전 이진트리
			- 데이터의 최솟값과 최댓값을 빠르게 찾기 위해 고안됨.
			- 완전 이진트리 : 노드를 삽입할때 최하단 왼쪽 노드부터 차례대로 삽입하는 트리
     
		2) bst와의 차이점
			- bst와는 달리 데이터 값의 크기에 따른 규칙이 없음
			- 그냥 노드를 넣는 순서만 존재.
		3) 이진탐색트리 : 검색을 위함 ////힙 : 최대/최소 값 검색을 위한 구조
		
		4) 최대힙/최소힙
			- 힙은 최대값을 구하기 위한 구조(최대힙)와 최소값을 구하기 위한 구조(최소힙)으로 분류 가능
			- 최대힙 : 각 노드의 값 >= 자식노드가 가진 값
			- 최소힙 : 각 노드의 값 <= 자식노드가 가진 값
			- 삭제 및 삽입 시 이 조건을 만족해야함.
		5) 삽입
			- 우선 삽입 순서대로 삽입
			-  부모 노드와 값을 비교 후 swap
			- 루트 노드까지 비교 &. swap 반복
		6) 삭제
			- 보통 삭제는 루트 노드를 삭제하는 것이 일반적임
 			- 루트 노드 삭제
			- 순서상 가장 마지막 노드를 루트 노드로 이동
			- 루트 노드의 자식 노드 중 자기 보다 큰 값이 있으면 swap.
			- 이걸 가장 아래까지 반복
		7) 구현
			- 힙은 보통 배열에다 구현함.
			- 0은 null로 하고 1부터 시작
			- 부모노드 인덱스 번호 = 자식노드 인덱스 번호/2
			- 왼쪽 자식노드 인덱스 번호 = 부모노드 인덱스 번호*2
			- 오른쪽 자식노드 인덱스 번호 = 부모노드 인덱스 번호*2+1
