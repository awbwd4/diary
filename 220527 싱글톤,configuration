1. 싱글톤 패턴
	1) 목적
		- 기존의 스프링없는 AppConfig는 요청을 할 때마다 객체를 새로 생성함.
		- 요청이 초당 100개이면 초당 100개의 객체 생성/소멸 -> 메모리 낭비
		- 따라서 딱 하나의 객체만 생성하고, 공유하도록 설계
	2) 구현
		- static 영역에 객체를 “”미리””하나 생성해둠
		- 생성될 객체의 생성자를 private final 등으로 하여 외부에서 직접 접근 및 호출을 못하도록
		- get메서드를 통해서만 해당 객체가 반환되도록 한다.
		- 이렇게 하면 항상 동일한 객체가 호출된다.
	3) 주의점
		- 같은 객체를 사용하므로 데이터의 중복이 발생될수 있음!!!
		- 여러 클라이언트가 하나의 같은 객체를 공유!!
		- 반드시 무상태(stateless)로 설계해야함!!
		- 공유하는 객체 내에 특정 클라이언트가 값을 변경할수 있는 필드가 있으면 안된다
		- 특정 클라이언트에 의존하는 필드가 있으면 안됨
		- 가급적 “”””””””읽기””””””””만 가능해야함!!!!!
		- 필드보다는, 공유가 안되는 지역변수, 파라미터, 스레드 로컬 등을 써야함.
		- 스프링 빈의 필드에 공유값 설정하면 안됨!!!!!

2. @Configuration
	1) 스프링은 어떻게 싱글톤을 보장하는가?
		- bean으로 등록된 객체 중, 한번 호출되어 사용된것은 다시 쓰고
		- 호출된적 없는것은 객체를 생성한다
		- “”””스프링 컨테이너””””에서 찾아서 반환함.
	2) 바이트코드 조작, SpringCGLIB
		- AppConfig도 빈으로 등록이 된다
		- 빈으로 등록이 될때, AppConfig그 자체가 아닌, 이 클래스를 상속한 다른 클래스를 스프링이 생성
		- 그리고 이 클래스를 대신 빈으로 등록한다. AppConfig@CGLIB
		- @Bean이 붙은 메서드마다 스프링 빈이 이미 등록이 되어있는지 아닌지 확인함.
		- @Configuration이 붙으면 이렇게 CGLIB을 빈으로 등록해준다.
		- @Configuration이 안붙으면 싱글톤이 깨짐.
