1.스태틱 메서드
  - 언제 static 메서드를 만들건지? iv(instance variable)을 사용하지 않을때!
  - static 메서드는 인스턴스 멤버를 사용할 수 없음.
  - 왜? 객체가 있을수도 있고 없을수도 있기 때문!

2.생성자
  - iv 초기화 “”””메서드””””
  - 따라서 오버로딩도 가능 -> 동일한 이름의 매개변수가 다른 생성자를 여러가지 만들 수 있는 이유
  - void가 없음 : 항상 리턴값이 없기 때문! void가 없는게 규칙
  - 매개변수가 없는 기본 생성자는 컴파일러가 만들어준다. 물론 기본 생성자를 코드로 작성했다면 그걸씀
  - 제대로 된 클래스라면 기본 생성자를 만들어주는게 낫다
  - why? 매개변수가 있는 오버로딩된 생성자가 있을 경우, 기본생성자는 컴파일러가 생성해주지 않는다.
  - “”아무런””생성자가 없을 경우에만 컴파일러가 기본생성자를 만들어줌
  - 기본생성자가 없을시 발생하는 에러는 에러 메시지가 모호함. 어떤 클래스를 만들든 기본 클래스를 직접 만드는 습관 필요

3.생성자 this()
   - 생성자가 여러개일 때, 하나의 생성자 안에서 같은 클래스의 다른 생성자를 호출할때 사용
   - 생성자의 첫 줄에서만 가능함.
  	 Car(){
		    this(“yellow”, “Auto”, 4);
       }

4.참조변수 this()
   - 생성자 this()랑 완전 별개임.
  	 Car(String color, String type, int door){
			  this.color = color;
		  	this.type = type;
			  this.door = door;			
      }

5.변수 초기화
   - 지역변수는 인스턴스변수와 달리 항상 초기화를 해줘야함.
   - instance variable, class variable은 자동 초기화됨.
   - 멤버 변수 초기화 방법 : 명시적 초기화, 초기화 블럭(static 변수에 난수로 초기화 하는것 등에 쓰임), 생성자
