1.프로세스 & 쓰레드
    - 실행중인 프로그램, 자원(메모리)+쓰레드
    - 프로세스 내에서 실제 작업 수행.(프로세스:쓰레드 = 공장:일꾼)
    - 모든 프로세스는 최소한 하나의 쓰레드를 갖고 있음.
    - 멀티 쓰레드 프로세스 : 자원 + 쓰레드+ 쓰레드….

2. 멀티 스레드 장단점
   1) 장점
     - 시스템 자원을 효율적으로 사용 가능
     - 사용자에 대한 응답성 향상
     - 코드 간결
    2) 단점
     - 자원 공유에 따른 문제 :  동기화에 주의해야, 교착상태 발생
      - 각 스레드가 효율적으로 고르게 실행될 수 있어야 함.

3. 실행시점
   1) OS 종속적
	- 쓰레드를 생성한 후에 start()를 호출해야 쓰레드가 작업을 시작한다.
       - start()를 호출한다고 바로 시작하는건 아님
	- 어느 쓰레드가 먼저 시작할지는 알 수 없음
	- 이건 os의 스케줄러가 결정함.
	- 쓰레드는 os 종속적이다

4. start()
	- 메인메서드에서 start가 호출되면
	- start메서드는 새로운 콜스택을 생성함
	- 이 콜스택 안에 run()을 넣음
	- 그리고 start메서드 종료
	- 스레드마다 콜스택이 새로 생성되므로, 병렬 작업이 가능함.
	- 메인메서드 안에 그냥 run이 호출되면 이건 그냥 싱글스레드임

5. main스레드
	- 메인 메서드의 코드를 수행하는 쓰레드
	- 실행중인 사용자 스레드가 하나도 없을때 프로그램이 종료됨

6. Context switching
 	- 작업을 번갈아 하다보면 작업 정보가 바뀌는 컨텍스트 스위칭이 발생
  	- 이 때문에 시간 지연이 발생한다. 
	- 시간은 더 소요되지만 멀티태스킹 가능 + 자원의 효율적 사용 때문에 멀티 스레드 사용

7. 쓰레드의 I/O 블라킹
	- 싱글스레드의 경우 입출력시 작업이 중단됨. 사용자의 입출력을 계속 기다리고 있음
	- 멀티스레드의 경우 사용자의 입력을 기다리는 동안 다른 작업이 수행 가능함.

8. 데몬스레드(daemon thread)
	- 일반스레드의 작업을 돕는 보조 역할, 일반 스레드가 모두 종료되면 자동 종료
	- 가비지컬렉터, 자동저장, 화면 자동 갱신등에 쓰임
	- 무한루프와 조건문을 이용해서 구현 및 실행함, 일반 스레드가 종료되면 무한루프도 자동 종료됨.
	- setDaemon()은 반드시 start()전에 구현돼야한다.

9. 쓰레드 실행 제어
	1) sleep, yield(자신에게 주어진 실행시간을 다른 스레드에 양보함) : static이 붙음 -> 스레드 자기 자신에게만 호출 가능함.
	2) sleep
	 - 현재 스레드를 지정된 시간동안 멈추게 함.
	 - 예외처리를 해야 한다. 
	3) interrupt
	 - 대기상태인 스레드를 실행 대기 상태로 만든다.

10. 스레드 동기화
	1)	
	- 멀티스레드일때, 한 스레드가 진행중인 작업을 다른 스레드가 간섭하지 못함.
	- 동기화 하려면 <간섭받으면 안되는 문장들>을 <임계영역>을 설정해야함.
	- 임계영역은 lock을 얻은 단 하나의 스레드만 출입이 가능(자바에서는 객체 1개당 락1개를 가짐)
	2) 임계영역 설정
	 - 임계영역은 개수와 영역을 최소화 해야함. 그래도 명색이 멀티스레드인데…
	 - 메서드 전체를 임계영역으로 지정
	 - 특정한 영역을 임계 영역으로 지정 
	 -가급적 메서드 전체가 아니라 그 내부에서 특정 영역만 임계 영역으로
