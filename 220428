22.04.28

1. 순수 jdbc
  - 기존에는 MemberRepository를 implements한 MemoryMemberRepository 클래스를 써서 회원가입, 회원 조회등을 했다. 해당 클래스는 Map 을 통해 메모리에만 기억이 되도록 했음
  - 이번에는 지난시간에 설치한 h2 데이터 베이스를 연결하여 해당 데이터 베이스와 통신하도록 함
  - 순수j jdbc를 사용하였음. JdbcMemberRepository 클래스 내에 CRUD를 위한 쿼리를 직접 써주고 하나하나 db connection, close를 해줘야함
 
2. OCP
 - MemberService와 MemberRepository는 해당 클래스에 어노테이션을 쓰지 않고 
 - SpringConfig에서 bean으로 등록하여 관리하고 있었다.
 - SpringConfig의 MemberRepository는 기존의 MemoryMemberRepository 객체를 생성하도록 되어있었는데
 - Jdbc로 리포지토리 관리를 하면서, JdbcMemberRepository객체를 생성하도록 변경함.
 - 이 SpringConfig의 생성되는 객체를 수정하는 것 외에 기존의 소스코드를 변경한것은 전혀 없음
 - 이것이 객체지향 설계 5원칙 SOLID 중 OCP 이다
 - OCP : Open/Close Principle - 확장에는 열려있으나 변경에는 닫혀있어야 한다. 즉, 자신의 확장에는 열려있고, 주변의 변화에 대해서는 닫혀있어야 한다. 
 - 이것은 interface를 통해 구현하여 해결한다.
